import sys
import requests
from PyQt5.QtWidgets import QApplication, QSplashScreen
from PyQt5.QtWebEngineWidgets import QWebEngineView
from PyQt5.QtCore import QUrl, QTimer, Qt
from PyQt5.QtGui import QPixmap
from io import BytesIO

class MainWindow(QWebEngineView):
    def __init__(self, url):
        super(MainWindow, self).__init__()

        # Set window title
        self.setWindowTitle("ChatGPT Desktop")

        # Load the URL
        self.load(QUrl(url))

        # Wait until page is loaded
        self.loadFinished.connect(self.onLoadFinished)

    def onLoadFinished(self):
        # Inject JavaScript code
        self.page().runJavaScript('''
            String.prototype.replaceAll = function(search, replacement) {
                var target = this;
                return target.replace(new RegExp(search, 'g'), replacement);
            };
        ''')

def main():
    # Create an application object
    app = QApplication(sys.argv)

    # Get the image from the URL
    response = requests.get('https://raw.githubusercontent.com/mkdirlove/chatgpt-desktop/main/icon.png')
    image_bytes = BytesIO(response.content)

    # Create a QPixmap object with the path to your splash image
    splash_pix = QPixmap()
    splash_pix.loadFromData(image_bytes.getvalue())

    # Resize the QPixmap
    splash_pix = splash_pix.scaled(300, 300, Qt.IgnoreAspectRatio)

    # Create a QSplashScreen object and pass it the QPixmap object
    splash = QSplashScreen(splash_pix)
    
    # Display the splash screen
    splash.show()

    # URL to display
    url = "https://chat.openai.com"

    # Create the main window but do not show it yet
    mainWin = MainWindow(url)

    # Use QTimer to control the duration the splash screen is shown
    # and show the main window when the splash screen is closed
    QTimer.singleShot(3000, splash.close)
    QTimer.singleShot(3000, mainWin.show) # 3000 milliseconds = 3 seconds

    # Execute the application
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()
